service: kani-keijiban-v2
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  stage: test
  region: us-east-1
  environment:
    tableName: ${self:custom.tableName}
    imageUploadBucket: ${self:custom.imageUploadBucket}
    region: ${self:provider.region}
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
        - s3:PutObject
        - s3:PutObjectAcl
      Resource: 
        - !GetAtt KaniKeijibanDB.Arn
        - !Join
          - ''
          - - !GetAtt ImageUploadBucket.Arn
            - '/*'
        
plugins:
  - serverless-sync-s3buckets

custom:
  siteName: yuuki-aws-dev.work
  imageUploadBucket: keijiban-image-upload-bucket-1218
  aliasCloudFrontId: Z2FDTNDATAQYW2
  hostedZoneId: Z1VE5MFYDL6VU
  aliasCloudFrontName: !GetAtt CloudFrontDistribution.DomainName
  syncS3Buckets:
    - bucketRef: KaniKeijibanWebSitev2
      localDir: static
  tableName: KaniPosts

functions:
  getKeijibanPosts:
    handler: lambdas/endpoints/getKeijibanPosts.handler
    events:
      - http:
          path: api/posts/{id}
          method: get
          cors: true
  createKeijibanPosts:
    handler: lambdas/endpoints/createKeijibanPosts.handler
    events:
      - http:
          path: api/posts
          method: post
          cors: true
  updateKeijibanPosts:
    handler: lambdas/endpoints/updateKeijibanPosts.handler
    events:
      - http:
          path: api/posts/{id}
          method: put
          cors: true
  updateKeijibanComments:
    handler: lambdas/endpoints/updateKeijibanComments.handler
    events:
      - http:
          path: api/posts/comments/{id}
          method: put
          cors: true
  deleteKeijibanPosts:
    handler: lambdas/endpoints/deleteKeijibanPosts.handler
    events:
      - http:
          path: api/posts/{id}
          method: delete
          cors: true
  scanKeijibanPosts:
    handler: lambdas/endpoints/scanKeijibanPosts.handler
    events:
      - http:
          path: api/posts
          method: get
          cors: true
resources:
 Resources:
  ImageUploadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:custom.imageUploadBucket}
      AccessControl: PublicRead
  KaniKeijibanWebSitev2:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: ${self:custom.siteName}
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
  KaniKeijibanWebSiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: KaniKeijibanWebSitev2
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: 
              - s3:GetObject
            Resource:
              Fn::Join: [
                "", [
                  "arn:aws:s3:::",
                  {
                    "Ref": KaniKeijibanWebSitev2
                  },
                  "/*"
                ]
              ]
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - ${self:custom.siteName}
        Origins:
          - DomainName: ${self:custom.siteName}.s3-website-${self:provider.region}.amazonaws.com
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: http-only
        Enabled: true
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          AcmCertificateArn: 	arn:aws:acm:<region>:<accountId>:certificate/<certificateId>
          SslSupportMethod: sni-only
  DnsRecord:
    Type: "AWS::Route53::RecordSet"
    Properties:
      AliasTarget:
        DNSName: ${self:custom.aliasCloudFrontName}
        HostedZoneId: ${self:custom.aliasCloudFrontId}
      HostedZoneId: ${self:custom.hostedZoneId}
      Name:
        Ref: KaniKeijibanWebSitev2
      Type: 'A'
  KaniKeijibanDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ${self:custom.tableName}
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
